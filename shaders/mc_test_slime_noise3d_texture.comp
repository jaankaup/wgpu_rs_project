#version 450
//#version 430

#define INTERPOLATE

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

// The output format of vertex.
struct Vertex {
    vec4 v;
    vec4 n;
};

// Uniform params.
layout(set = 0, binding = 0) uniform McParams {
    vec4 base_position;
    float isovalue;
    float cube_length;
    float for_future_usage1;
    float for_future_usage2;
};

// Atomic counter. This counter ensures triangles are stored sequently to unique locations on mc_out buffer.
layout(set = 0, binding = 1) buffer McCounter {
    uint counter;
};
 
// The output array.
layout(set = 1, binding = 0) writeonly buffer McOutput {
    Vertex mc_out[];
};

// noise.
layout(set = 1, binding = 1) readonly buffer Texture3D {
    float[] noise_texture;
};

// The cube. Eight corners.
struct Cube {
    vec4 vertices[8];
    vec4 normals[8];
};

// Edge information. 
const uvec2[12] edge_info = {
	uvec2(0,1), uvec2(1,2), uvec2(2,3), uvec2(3,0),
    uvec2(4,5), uvec2(5,6), uvec2(6,7), uvec2(7,4),
    uvec2(0,4), uvec2(1,5), uvec2(2,6), uvec2(3,7) 
};

const uint[1280] triTable = {
    16777215 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2051 ,16777215 ,16777215 ,16777215 ,16777215 ,
    265 ,16777215 ,16777215 ,16777215 ,16777215 ,
    67587 ,591873 ,16777215 ,16777215 ,16777215 ,
    66058 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2051 ,66058 ,16777215 ,16777215 ,16777215 ,
    590346 ,521 ,16777215 ,16777215 ,16777215 ,
    133123 ,133640 ,657672 ,16777215 ,16777215 ,
    199426 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2818 ,527104 ,16777215 ,16777215 ,16777215 ,
    67840 ,131851 ,16777215 ,16777215 ,16777215 ,
    68354 ,67851 ,591883 ,16777215 ,16777215 ,
    199169 ,723459 ,16777215 ,16777215 ,16777215 ,
    2561 ,2058 ,527114 ,16777215 ,16777215 ,
    198912 ,199433 ,723465 ,16777215 ,16777215 ,
    591882 ,657419 ,16777215 ,16777215 ,16777215 ,
    263944 ,16777215 ,16777215 ,16777215 ,16777215 ,
    262912 ,459524 ,16777215 ,16777215 ,16777215 ,
    265 ,525319 ,16777215 ,16777215 ,16777215 ,
    262409 ,263937 ,459521 ,16777215 ,16777215 ,
    66058 ,525319 ,16777215 ,16777215 ,16777215 ,
    197639 ,196612 ,66058 ,16777215 ,16777215 ,
    590346 ,589826 ,525319 ,16777215 ,16777215 ,
    133641 ,133383 ,132867 ,461060 ,16777215 ,
    525319 ,199426 ,16777215 ,16777215 ,16777215 ,
    721927 ,721412 ,131076 ,16777215 ,16777215 ,
    589825 ,525319 ,131851 ,16777215 ,16777215 ,
    263947 ,590859 ,592642 ,590337 ,16777215 ,
    199169 ,199434 ,460804 ,16777215 ,16777215 ,
    68362 ,66571 ,65540 ,461572 ,16777215 ,
    263944 ,589835 ,592650 ,720899 ,16777215 ,
    263947 ,264969 ,592650 ,16777215 ,16777215 ,
    591108 ,16777215 ,16777215 ,16777215 ,16777215 ,
    591108 ,2051 ,16777215 ,16777215 ,16777215 ,
    1284 ,66816 ,16777215 ,16777215 ,16777215 ,
    525572 ,525061 ,196869 ,16777215 ,16777215 ,
    66058 ,591108 ,16777215 ,16777215 ,16777215 ,
    196616 ,66058 ,264453 ,16777215 ,16777215 ,
    328202 ,328706 ,262146 ,16777215 ,16777215 ,
    133637 ,197125 ,197892 ,197640 ,16777215 ,
    591108 ,131851 ,16777215 ,16777215 ,16777215 ,
    2818 ,2059 ,264453 ,16777215 ,16777215 ,
    1284 ,261 ,131851 ,16777215 ,16777215 ,
    131333 ,132360 ,133131 ,264197 ,16777215 ,
    656139 ,655619 ,591108 ,16777215 ,16777215 ,
    264453 ,2049 ,526849 ,527114 ,16777215 ,
    328704 ,327691 ,330506 ,720899 ,16777215 ,
    328712 ,329738 ,657419 ,16777215 ,16777215 ,
    591624 ,329481 ,16777215 ,16777215 ,16777215 ,
    590592 ,591107 ,329475 ,16777215 ,16777215 ,
    1800 ,263 ,66823 ,16777215 ,16777215 ,
    66819 ,197895 ,16777215 ,16777215 ,16777215 ,
    591624 ,591111 ,655618 ,16777215 ,16777215 ,
    655618 ,591104 ,328448 ,329475 ,16777215 ,
    524290 ,524805 ,525575 ,656642 ,16777215 ,
    133637 ,132355 ,197895 ,16777215 ,16777215 ,
    461061 ,460809 ,199426 ,16777215 ,16777215 ,
    591111 ,591618 ,590336 ,132875 ,16777215 ,
    131851 ,264 ,67336 ,66823 ,16777215 ,
    721409 ,721159 ,459013 ,16777215 ,16777215 ,
    591112 ,525575 ,655619 ,656139 ,16777215 ,
    329472 ,327689 ,461568 ,65546 ,723456 ,
    723456 ,720899 ,656640 ,524295 ,329472 ,
    723461 ,461573 ,16777215 ,16777215 ,16777215 ,
    656901 ,16777215 ,16777215 ,16777215 ,16777215 ,
    2051 ,330246 ,16777215 ,16777215 ,16777215 ,
    589825 ,330246 ,16777215 ,16777215 ,16777215 ,
    67587 ,67848 ,330246 ,16777215 ,16777215 ,
    67077 ,132609 ,16777215 ,16777215 ,16777215 ,
    67077 ,66054 ,196616 ,16777215 ,16777215 ,
    591365 ,589830 ,518 ,16777215 ,16777215 ,
    329992 ,329730 ,328198 ,197128 ,16777215 ,
    131851 ,656901 ,16777215 ,16777215 ,16777215 ,
    720904 ,721408 ,656901 ,16777215 ,16777215 ,
    265 ,131851 ,330246 ,16777215 ,16777215 ,
    330246 ,67842 ,592642 ,591883 ,16777215 ,
    393995 ,394499 ,327939 ,16777215 ,16777215 ,
    2059 ,2821 ,1281 ,330502 ,16777215 ,
    199430 ,774 ,1541 ,1289 ,16777215 ,
    394505 ,395531 ,723208 ,16777215 ,16777215 ,
    330246 ,263944 ,16777215 ,16777215 ,16777215 ,
    262912 ,263939 ,394506 ,16777215 ,16777215 ,
    67840 ,330246 ,525319 ,16777215 ,16777215 ,
    656901 ,67847 ,67331 ,461060 ,16777215 ,
    393474 ,394497 ,263944 ,16777215 ,16777215 ,
    66053 ,328198 ,196612 ,197639 ,16777215 ,
    525319 ,589829 ,1541 ,518 ,16777215 ,
    459529 ,461060 ,197129 ,329990 ,132617 ,
    199426 ,460804 ,656901 ,16777215 ,16777215 ,
    330246 ,263938 ,262656 ,132875 ,16777215 ,
    265 ,263944 ,131851 ,330246 ,16777215 ,
    590337 ,592642 ,590859 ,461572 ,330246 ,
    525319 ,199429 ,197889 ,330502 ,16777215 ,
    327947 ,330502 ,65547 ,461572 ,1035 ,
    1289 ,1541 ,774 ,722435 ,525319 ,
    394505 ,395531 ,263945 ,461577 ,16777215 ,
    656393 ,394250 ,16777215 ,16777215 ,16777215 ,
    264710 ,264458 ,2051 ,16777215 ,16777215 ,
    655361 ,656896 ,394240 ,16777215 ,16777215 ,
    525057 ,524550 ,525828 ,393482 ,16777215 ,
    66569 ,66052 ,132612 ,16777215 ,16777215 ,
    196616 ,66057 ,132105 ,132612 ,16777215 ,
    516 ,262662 ,16777215 ,16777215 ,16777215 ,
    525058 ,524804 ,262662 ,16777215 ,16777215 ,
    656393 ,656900 ,721411 ,16777215 ,16777215 ,
    2050 ,133131 ,264458 ,264710 ,16777215 ,
    199426 ,262 ,1540 ,393482 ,16777215 ,
    394241 ,393482 ,264193 ,131339 ,527105 ,
    591364 ,590598 ,590083 ,722435 ,16777215 ,
    527105 ,524544 ,722433 ,590084 ,394241 ,
    199430 ,198144 ,1540 ,16777215 ,16777215 ,
    394248 ,722440 ,16777215 ,16777215 ,16777215 ,
    461318 ,460810 ,526602 ,16777215 ,16777215 ,
    1795 ,2567 ,2314 ,395018 ,16777215 ,
    656903 ,68103 ,67336 ,67584 ,16777215 ,
    656903 ,657153 ,67331 ,16777215 ,16777215 ,
    66054 ,67080 ,67593 ,525831 ,16777215 ,
    132617 ,133377 ,395017 ,2307 ,459529 ,
    460800 ,458758 ,393218 ,16777215 ,16777215 ,
    459522 ,395010 ,16777215 ,16777215 ,16777215 ,
    131851 ,656904 ,657417 ,525831 ,16777215 ,
    131079 ,132875 ,2311 ,395018 ,592391 ,
    67584 ,67336 ,68103 ,395018 ,131851 ,
    721409 ,721159 ,656897 ,395009 ,16777215 ,
    526598 ,525831 ,590086 ,722435 ,66310 ,
    2305 ,722439 ,16777215 ,16777215 ,16777215 ,
    460800 ,458758 ,199424 ,722432 ,16777215 ,
    461574 ,16777215 ,16777215 ,16777215 ,16777215 ,
    460299 ,16777215 ,16777215 ,16777215 ,16777215 ,
    196616 ,722694 ,16777215 ,16777215 ,16777215 ,
    265 ,722694 ,16777215 ,16777215 ,16777215 ,
    524553 ,525057 ,722694 ,16777215 ,16777215 ,
    655618 ,396039 ,16777215 ,16777215 ,16777215 ,
    66058 ,196616 ,396039 ,16777215 ,16777215 ,
    133376 ,133641 ,396039 ,16777215 ,16777215 ,
    396039 ,133635 ,657411 ,657672 ,16777215 ,
    459267 ,393735 ,16777215 ,16777215 ,16777215 ,
    458760 ,460288 ,393728 ,16777215 ,16777215 ,
    132870 ,131847 ,265 ,16777215 ,16777215 ,
    67074 ,67590 ,67848 ,526086 ,16777215 ,
    657158 ,655623 ,66311 ,16777215 ,16777215 ,
    657158 ,67338 ,67591 ,65544 ,16777215 ,
    775 ,1802 ,2569 ,395783 ,16777215 ,
    460298 ,461320 ,526857 ,16777215 ,16777215 ,
    395268 ,722950 ,16777215 ,16777215 ,16777215 ,
    198155 ,196614 ,1030 ,16777215 ,16777215 ,
    525835 ,525318 ,589825 ,16777215 ,16777215 ,
    590854 ,591363 ,590593 ,721670 ,16777215 ,
    395268 ,396040 ,133633 ,16777215 ,16777215 ,
    66058 ,196619 ,1547 ,1030 ,16777215 ,
    264968 ,263691 ,521 ,133641 ,16777215 ,
    657667 ,656130 ,590851 ,721670 ,263683 ,
    524803 ,525314 ,263682 ,16777215 ,16777215 ,
    1026 ,263682 ,16777215 ,16777215 ,16777215 ,
    67840 ,131844 ,132102 ,262920 ,16777215 ,
    67844 ,66562 ,132102 ,16777215 ,16777215 ,
    524547 ,525825 ,525318 ,395777 ,16777215 ,
    655616 ,655366 ,393220 ,16777215 ,16777215 ,
    263683 ,262920 ,395779 ,777 ,657667 ,
    657668 ,395780 ,16777215 ,16777215 ,16777215 ,
    264453 ,460299 ,16777215 ,16777215 ,16777215 ,
    2051 ,264453 ,722694 ,16777215 ,16777215 ,
    327681 ,328704 ,460299 ,16777215 ,16777215 ,
    722694 ,525060 ,197892 ,196869 ,16777215 ,
    591108 ,655618 ,460299 ,16777215 ,16777215 ,
    396039 ,66058 ,2051 ,264453 ,16777215 ,
    460299 ,328714 ,262666 ,262146 ,16777215 ,
    197640 ,197892 ,197125 ,656642 ,722694 ,
    459267 ,460290 ,328713 ,16777215 ,16777215 ,
    591108 ,2054 ,1538 ,395271 ,16777215 ,
    198146 ,198406 ,66816 ,328704 ,16777215 ,
    393736 ,395271 ,131336 ,264197 ,66824 ,
    591108 ,655622 ,67334 ,66311 ,16777215 ,
    67082 ,67334 ,65543 ,526080 ,591108 ,
    262154 ,264709 ,778 ,395783 ,198410 ,
    460298 ,461320 ,328714 ,264202 ,16777215 ,
    395525 ,396041 ,722953 ,16777215 ,16777215 ,
    198155 ,1539 ,1286 ,2309 ,16777215 ,
    2824 ,1291 ,261 ,329227 ,16777215 ,
    396035 ,393989 ,328449 ,16777215 ,16777215 ,
    66058 ,591115 ,592648 ,722182 ,16777215 ,
    2819 ,1547 ,2310 ,329225 ,66058 ,
    722949 ,722182 ,524293 ,656642 ,517 ,
    396035 ,393989 ,133635 ,656643 ,16777215 ,
    329737 ,328200 ,329218 ,198658 ,16777215 ,
    591110 ,591360 ,1538 ,16777215 ,16777215 ,
    66824 ,67584 ,329224 ,198658 ,393736 ,
    66822 ,131334 ,16777215 ,16777215 ,16777215 ,
    66310 ,67082 ,198662 ,329225 ,526598 ,
    655616 ,655366 ,591104 ,329216 ,16777215 ,
    776 ,329226 ,16777215 ,16777215 ,16777215 ,
    656646 ,16777215 ,16777215 ,16777215 ,16777215 ,
    722186 ,460043 ,16777215 ,16777215 ,16777215 ,
    722186 ,722693 ,525056 ,16777215 ,16777215 ,
    330503 ,330251 ,67840 ,16777215 ,16777215 ,
    657157 ,658183 ,591873 ,525057 ,16777215 ,
    721154 ,722689 ,460033 ,16777215 ,16777215 ,
    2051 ,66055 ,67333 ,459275 ,16777215 ,
    591621 ,590343 ,589826 ,133895 ,16777215 ,
    460034 ,459275 ,329986 ,197128 ,591874 ,
    132362 ,131845 ,198405 ,16777215 ,16777215 ,
    524800 ,525570 ,526085 ,655877 ,16777215 ,
    589825 ,330243 ,328455 ,199170 ,16777215 ,
    591874 ,590337 ,526082 ,655877 ,460034 ,
    66309 ,198405 ,16777215 ,16777215 ,16777215 ,
    2055 ,1793 ,67333 ,16777215 ,16777215 ,
    589827 ,590597 ,328455 ,16777215 ,16777215 ,
    591879 ,329991 ,16777215 ,16777215 ,16777215 ,
    329732 ,330248 ,658184 ,16777215 ,16777215 ,
    327684 ,330496 ,330251 ,721664 ,16777215 ,
    265 ,525322 ,526859 ,656389 ,16777215 ,
    658180 ,656389 ,721668 ,590849 ,196868 ,
    132353 ,133125 ,133896 ,263432 ,16777215 ,
    1035 ,2819 ,263435 ,133889 ,327947 ,
    517 ,1289 ,133893 ,263432 ,722949 ,
    590853 ,133891 ,16777215 ,16777215 ,16777215 ,
    132362 ,197890 ,197637 ,198660 ,16777215 ,
    330242 ,328196 ,262656 ,16777215 ,16777215 ,
    199170 ,197898 ,198661 ,263432 ,265 ,
    330242 ,328196 ,67842 ,590850 ,16777215 ,
    525317 ,525571 ,197889 ,16777215 ,16777215 ,
    1029 ,65541 ,16777215 ,16777215 ,16777215 ,
    525317 ,525571 ,589829 ,773 ,16777215 ,
    590853 ,16777215 ,16777215 ,16777215 ,16777215 ,
    264967 ,264459 ,592395 ,16777215 ,16777215 ,
    2051 ,264455 ,592647 ,592395 ,16777215 ,
    68107 ,68356 ,66560 ,459787 ,16777215 ,
    196868 ,197640 ,68100 ,459787 ,658180 ,
    264967 ,592644 ,590347 ,590082 ,16777215 ,
    591620 ,592647 ,590091 ,133889 ,2051 ,
    722692 ,721922 ,132096 ,16777215 ,16777215 ,
    722692 ,721922 ,525060 ,197124 ,16777215 ,
    133386 ,132873 ,131847 ,459785 ,16777215 ,
    592391 ,591620 ,655879 ,526080 ,131079 ,
    198410 ,199170 ,459786 ,68096 ,262154 ,
    68098 ,526084 ,16777215 ,16777215 ,16777215 ,
    264449 ,262407 ,459011 ,16777215 ,16777215 ,
    264449 ,262407 ,2049 ,526081 ,16777215 ,
    262147 ,459779 ,16777215 ,16777215 ,16777215 ,
    264199 ,16777215 ,16777215 ,16777215 ,16777215 ,
    592392 ,658184 ,16777215 ,16777215 ,16777215 ,
    196617 ,198923 ,723210 ,16777215 ,16777215 ,
    266 ,2568 ,526859 ,16777215 ,16777215 ,
    196874 ,721674 ,16777215 ,16777215 ,16777215 ,
    66059 ,68361 ,592648 ,16777215 ,16777215 ,
    196617 ,198923 ,66057 ,133897 ,16777215 ,
    523 ,524299 ,16777215 ,16777215 ,16777215 ,
    197131 ,16777215 ,16777215 ,16777215 ,16777215 ,
    131848 ,133130 ,657417 ,16777215 ,16777215 ,
    592386 ,2306 ,16777215 ,16777215 ,16777215 ,
    131848 ,133130 ,264 ,68104 ,16777215 ,
    68098 ,16777215 ,16777215 ,16777215 ,16777215 ,
    66312 ,590088 ,16777215 ,16777215 ,16777215 ,
    2305 ,16777215 ,16777215 ,16777215 ,16777215 ,
    776 ,16777215 ,16777215 ,16777215 ,16777215 ,
    16777215 ,16777215 ,16777215 ,16777215 ,16777215 
};

const int MAX_DENSITY_ARRAY_SIZE = 255 + 255 * 256 + 255 * 256 * 8;

// Density values.
shared float[343] density_values;

// Work group base index.
shared uint work_group_base_index;

// The work group density value base index.
// shared ivec3 work_group_global_coord;

float get_density_value(int pos_x, int pos_y, int pos_z) {

    // const float default_density = 10.0;
    // uint(index == 0 | index >  
    // const bool is_inside_context =  

    //if (pos_x > 5 || pos_y > 5 || pos_z > 5) {
    //    return 10.0;
    //}
    int index = pos_x + pos_y * 7 + pos_z * 7 * 7;
    //const int index = pos_x + pos_y * 256 + pos_z * 256 * 8;
    //return noise_texture[index];
    return density_values[index];
}

uint calculate_case(in Cube cube, float isovalue)
{
  uint result = 0;

  result |= uint(cube.vertices[7].w < isovalue) << 7;
  result |= uint(cube.vertices[6].w < isovalue) << 6;
  result |= uint(cube.vertices[5].w < isovalue) << 5;
  result |= uint(cube.vertices[4].w < isovalue) << 4;
  result |= uint(cube.vertices[3].w < isovalue) << 3;
  result |= uint(cube.vertices[2].w < isovalue) << 2;
  result |= uint(cube.vertices[1].w < isovalue) << 1;
  result |= uint(cube.vertices[0].w < isovalue);

  return result;
}

vec3 calculate_normal(ivec3 pos)
{
  // int pos_x = pos.x;
  // int pos_y = pos.y;
  // int pos_z = pos.z;
  vec3 grad;
  float right = get_density_value(pos.x + 1, pos.y, pos.z);
  float left = get_density_value(pos.x - 1, pos.y, pos.z);
  float up = get_density_value(pos.x, pos.y + 1, pos.z);
  float down = get_density_value(pos.x, pos.y - 1, pos.z);
  float z_minus = get_density_value(pos.x, pos.y, pos.z + 1);
  float z = get_density_value(pos.x, pos.y, pos.z - 1);
  grad.x = right - left;
  //grad.x = left - right;
  grad.y = up - down;
  grad.z = z_minus - z;
  //grad.z = z - z_minus;
  return normalize(grad); // TODO: check if is this necessery
}

vec4 interpolateV(vec4 va, vec4 vb, float isovalue)
{
   #ifdef INTERPOLATE
     
     if (abs(isovalue - va.w) < 0.0001) {
        return vec4(va.xyz, 1.0);
     }
     else if (abs(isovalue - vb.w) < 0.00001) {
        return vec4(vb.xyz, 1.0);
     }
     else if (abs(va.w-vb.w) < 0.00001) {
        return vec4(va.xyz, 1.0);
     }
     
     else
     {
       vec4 p;
       float mu = (isovalue - va.w) / (vb.w - va.w);
       p.x = va.x + mu * (vb.x - va.x);
       p.y = va.y + mu * (vb.y - va.y);
       p.z = va.z + mu * (vb.z - va.z);
       p.w = 1.0;
       return p;
     }
   #else
       if (abs(isovalue - va.w) < 0.0001) {
          return vec4(va.xyz, 0.9);
       }
       else if (abs(isovalue - vb.w) < 0.0001) {
          return vec4(vb.xyz, 0.9);
       }
       else if (abs(va.w-vb.w) < 0.0001) {
          return vec4(va.xyz, 0.9);
       }
       return vec4(va.xyz, 0.9);
   #endif
}

vec4 interpolateN(vec4 na, vec4 nb, float densityA, float densityB, float isovalue)
{
   #ifdef INTERPOLATE
     if (abs(isovalue - densityA) < 0.00001) {
	    return vec4(normalize(na.xyz), 0.0);
    }
     else if (abs(isovalue - densityB) < 0.00001) {
	    return vec4(normalize(nb.xyz), 0.0);
     }
     else if (abs(densityA-densityB) < 0.00001) {
         return vec4(normalize(na.xyz), 0.0);
     }
     
     else
     {
       float mu = (isovalue - densityA) / (densityB - densityA);
       float x = na.x + mu * (nb.x - na.x);
       float y = na.y + mu * (nb.y - na.y);
       float z = na.z + mu * (nb.z - na.z);
       return vec4(normalize(vec3(x, y, z)), 0.0);
     }
   #else
       if (abs(isovalue - densityA) < 0.000001) { return vec4(normalize(na.xyz), 0.0); }
       else if (abs(isovalue - densityB) < 0.000001) { return vec4(normalize(nb.xyz), 0.0);}
       else if (abs(densityA-densityB) < 0.000001) { return vec4(normalize(na.xyz), 0.0); }
       float iso = (densityA + densityB) * 0.5;
       float mu = (iso - densityA) / (densityB - densityA);
       float x = na.x + mu * (nb.x - na.x);
       float y = na.y + mu * (nb.y - na.y);
       float z = na.z + mu * (nb.z - na.z);
       return vec4(normalize(vec4(x, y, z, 0.0)));
   #endif
}

void createVertex(uint edgeValue,
	          in Cube cube,
              uint arrayIndex)
{

    uvec2 edge = edge_info[edgeValue];
    Vertex v;
    v.v = interpolateV(cube.vertices[edge.x], cube.vertices[edge.y], isovalue);
    v.n = interpolateN(cube.normals[edge.x], cube.normals[edge.y], cube.vertices[edge.x].w, cube.vertices[edge.y].w, isovalue);
    mc_out[arrayIndex] = v;

}

// From local index to 6x6x6 coordinate space. 
ivec3 index1D_to_index3D(uint ind) {
	uint index = ind;
	uint wh = 7 * 7;
	uint z = index / wh;
	index -= z * wh;
	uint y = index / 7;
	index -= y * 7;
	uint x = index;
	return ivec3(int(x), int(y), int(z));	
}

void main() {

    // Get the base cube position from thread ids. 
    const int pos_x = int(gl_GlobalInvocationID.x);
    const int pos_y = int(gl_GlobalInvocationID.y);
    const int pos_z = int(gl_GlobalInvocationID.z);

    const uint local_ind = gl_LocalInvocationIndex;

    // Get the work group base array index (density value array).
    // if (local_ind == 0) {
    //     // work_group_base_index == pos_x + pos_y * 256 + pos_z * 256 * 8;
    //     work_group_global_coord = ivec3(int(gl_WorkGroupID.x) * 4, int(gl_WorkGroupID.y) * 4, int(gl_WorkGroupID.z) * 4); //   ivec3(pos_x, pos_y, pos_z);
    // }

    // barrier();

    ivec3 work_group_global_coord = ivec3(int(gl_WorkGroupID.x) * 4, int(gl_WorkGroupID.y) * 4, int(gl_WorkGroupID.z) * 4); //   ivec3(pos_x, pos_y, pos_z);
    const float default_density_value = 10.0;

    ivec3 local_7x7 = index1D_to_index3D(local_ind);

    for (int b=0; b<7 ; b++) {
        if (local_ind > 48) continue;
        ivec3 density_coord = work_group_global_coord + ivec3(local_7x7.xy, b) - ivec3(1,1,1);

        // bool outside = density_coord.x < 0 || density_coord.x > 255 ||
        //                density_coord.y < 0 || density_coord.y > 7  ||
        //                density_coord.z < 0 || density_coord.z > 255);
        if (density_coord.x <= 0 || density_coord.x > 255 ||
            density_coord.y <= 0 || density_coord.y > 11  ||
            //density_coord.y <= 0 || density_coord.y > 7  ||
            density_coord.z <= 0 || density_coord.z > 255) {
            density_values[local_7x7.x + local_7x7.y * 7 + b*7*7] = 10.0;
        }
        else {
            const int index = density_coord.x + density_coord.y * 256 + density_coord.z * 256 * 12;
            density_values[local_7x7.x + local_7x7.y * 7 + b*7*7] = noise_texture[index];
        }
    }

    barrier();

    // Local coordinates. We need these for accessing shared density values.
    const int local_pos_x = int(gl_LocalInvocationID.x) + 1;
    const int local_pos_y = int(gl_LocalInvocationID.y) + 1;
    const int local_pos_z = int(gl_LocalInvocationID.z) + 1;

    // Create and scale cube base position.
    vec3 position = vec3(pos_x, pos_y, pos_z) * cube_length + base_position.xyz;

    // Create cube corner coordinates. 
    vec3 p0 = position;
    vec3 p1 = position + vec3(cube_length   , 0.0           , 0.0);
    vec3 p2 = position + vec3(cube_length   , cube_length   , 0.0);
    vec3 p3 = position + vec3(0.0           , cube_length   , 0.0);
    vec3 p4 = position + vec3(0.0           , 0.0           , cube_length);
    vec3 p5 = position + vec3(cube_length   , 0.0           , cube_length);
    vec3 p6 = position + vec3(cube_length   , cube_length   , cube_length);
    vec3 p7 = position + vec3(0.0           , cube_length   , cube_length);

    ivec3 p_index0 = ivec3(local_pos_x,     local_pos_y,     local_pos_z);
    ivec3 p_index1 = ivec3(local_pos_x + 1, local_pos_y,     local_pos_z);
    ivec3 p_index2 = ivec3(local_pos_x + 1, local_pos_y + 1, local_pos_z);
    ivec3 p_index3 = ivec3(local_pos_x,     local_pos_y + 1, local_pos_z);
    ivec3 p_index4 = ivec3(local_pos_x,     local_pos_y,     local_pos_z + 1);
    ivec3 p_index5 = ivec3(local_pos_x + 1, local_pos_y,     local_pos_z + 1);
    ivec3 p_index6 = ivec3(local_pos_x + 1, local_pos_y + 1, local_pos_z + 1);
    ivec3 p_index7 = ivec3(local_pos_x,     local_pos_y + 1, local_pos_z + 1);

    // Create the cube.
    Cube cube;

    // Cube corner positions and density values.
    //++ cube.vertices[0] = vec4(p0, get_density_value(p_index0.x, p_index0.y, p_index0.z));
    //++ cube.vertices[1] = vec4(p1, get_density_value(p_index1.x, p_index1.y, p_index1.z));
    //++ cube.vertices[2] = vec4(p2, get_density_value(p_index2.x, p_index2.y, p_index2.z));
    //++ cube.vertices[3] = vec4(p3, get_density_value(p_index3.x, p_index3.y, p_index3.z));
    //++ cube.vertices[4] = vec4(p4, get_density_value(p_index4.x, p_index4.y, p_index4.z));
    //++ cube.vertices[5] = vec4(p5, get_density_value(p_index5.x, p_index5.y, p_index5.z));
    //++ cube.vertices[6] = vec4(p6, get_density_value(p_index6.x, p_index6.y, p_index6.z));
    //++ cube.vertices[7] = vec4(p7, get_density_value(p_index7.x, p_index7.y, p_index7.z));

    cube.vertices[0] = vec4(p0, get_density_value(p_index0.x, p_index0.y, p_index0.z));
    cube.vertices[1] = vec4(p1, get_density_value(p_index1.x, p_index1.y, p_index1.z));
    cube.vertices[2] = vec4(p2, get_density_value(p_index2.x, p_index2.y, p_index2.z));
    cube.vertices[3] = vec4(p3, get_density_value(p_index3.x, p_index3.y, p_index3.z));
    cube.vertices[4] = vec4(p4, get_density_value(p_index4.x, p_index4.y, p_index4.z));
    cube.vertices[5] = vec4(p5, get_density_value(p_index5.x, p_index5.y, p_index5.z));
    cube.vertices[6] = vec4(p6, get_density_value(p_index6.x, p_index6.y, p_index6.z));
    cube.vertices[7] = vec4(p7, get_density_value(p_index7.x, p_index7.y, p_index7.z));

    // Calculate the cube case number.
    uint cube_case = calculate_case(cube, isovalue);
  
    // This cube doesn't create any triangles.
    if (cube_case == 0 || cube_case == 255) return;

    // Calculate normals for cube corners.
    cube.normals[0] = vec4(calculate_normal(p_index0), 0.0);
    cube.normals[1] = vec4(calculate_normal(p_index1), 0.0);
    cube.normals[2] = vec4(calculate_normal(p_index2), 0.0);
    cube.normals[3] = vec4(calculate_normal(p_index3), 0.0);
    cube.normals[4] = vec4(calculate_normal(p_index4), 0.0);
    cube.normals[5] = vec4(calculate_normal(p_index5), 0.0);
    cube.normals[6] = vec4(calculate_normal(p_index6), 0.0);
    cube.normals[7] = vec4(calculate_normal(p_index7), 0.0);

    const uint OFFSET = 5;

    // Create triangles and save them to destination array (mc_out[]).
    for (uint i=0 ; i<5 ; i++) {

        uint base_index = triTable[cube_case * OFFSET + i];

        if (base_index != 16777215) { 

            uint index = atomicAdd(counter, 3);
            createVertex((base_index & 0xff0000) >> 16, cube, index);
            createVertex((base_index & 0xff00) >> 8   , cube, index+1);
            createVertex( base_index & 0xff,            cube, index+2);
        }
    }
}

